# Generated by Django 2.2.3 on 2019-07-26 04:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('goal', models.IntegerField(default=0)),
                ('archived', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Champion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=255)),
                ('champId', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('key', models.CharField(max_length=255)),
                ('title', models.CharField(max_length=255)),
                ('blurb', models.TextField(max_length=255)),
                ('info_attack', models.BigIntegerField()),
                ('info_defense', models.BigIntegerField()),
                ('info_magic', models.BigIntegerField()),
                ('info_difficulty', models.BigIntegerField()),
                ('image_full', models.CharField(max_length=255)),
                ('image_sprite', models.CharField(max_length=255)),
                ('image_group', models.CharField(max_length=255)),
                ('image_x', models.BigIntegerField(default=0)),
                ('image_y', models.BigIntegerField(default=0)),
                ('image_w', models.BigIntegerField(default=0)),
                ('image_h', models.BigIntegerField(default=0)),
                ('tags', models.CharField(max_length=255)),
                ('partype', models.CharField(max_length=255)),
                ('stats_hp', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_hpperlevel', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_mp', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_mpperlevel', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_movespeed', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_armor', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_armorperlevel', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_spellblock', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_spellblockperlevel', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_attackrange', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_hpregen', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_hpregenperlevel', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_mpregen', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_mpregenperlevel', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_crit', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_critperlevel', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_attackdamage', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_attackdamageperlevel', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_attackspeedperlevel', models.DecimalField(decimal_places=4, max_digits=8)),
                ('stats_attackspeed', models.DecimalField(decimal_places=4, max_digits=8)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('version', models.CharField(max_length=255)),
                ('itemId', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('colloq', models.CharField(blank=True, max_length=255, null=True)),
                ('plaintext', models.CharField(blank=True, max_length=255, null=True)),
                ('consumed', models.BooleanField(default=False)),
                ('stacks', models.IntegerField(default=1)),
                ('depth', models.IntegerField(default=1)),
                ('consumeOnFull', models.BooleanField(default=False)),
                ('specialRecipe', models.IntegerField(default=0)),
                ('inStore', models.BooleanField(default=True)),
                ('hideFromAll', models.BooleanField(default=False)),
                ('requiredChampion', models.CharField(max_length=255)),
                ('requiredAlly', models.CharField(max_length=255)),
                ('image_full', models.CharField(max_length=255)),
                ('image_sprite', models.CharField(max_length=255)),
                ('image_group', models.CharField(max_length=255)),
                ('image_x', models.IntegerField(default=0)),
                ('image_y', models.IntegerField(default=0)),
                ('image_w', models.IntegerField(default=0)),
                ('image_h', models.IntegerField(default=0)),
                ('gold_base', models.IntegerField(default=0)),
                ('gold_purchasable', models.BooleanField(default=True)),
                ('gold_total', models.IntegerField(default=0)),
                ('gold_sell', models.IntegerField(default=0)),
                ('tags', models.CharField(max_length=255)),
                ('maps_1', models.BooleanField(default=True)),
                ('maps_8', models.BooleanField(default=True)),
                ('maps_10', models.BooleanField(default=True)),
                ('maps_11', models.BooleanField(default=True)),
                ('maps_12', models.BooleanField(default=True)),
                ('FlatHPPoolMod', models.IntegerField(default=0)),
                ('rFlatHPModPerLevel', models.IntegerField(default=0)),
                ('FlatMPPoolMod', models.IntegerField(default=0)),
                ('rFlatMPModPerLevel', models.IntegerField(default=0)),
                ('PercentHPPoolMod', models.IntegerField(default=0)),
                ('PercentMPPoolMod', models.IntegerField(default=0)),
                ('FlatHPRegenMod', models.IntegerField(default=0)),
                ('rFlatHPRegenModPerLevel', models.IntegerField(default=0)),
                ('PercentHPRegenMod', models.IntegerField(default=0)),
                ('FlatMPRegenMod', models.IntegerField(default=0)),
                ('rFlatMPRegenModPerLevel', models.IntegerField(default=0)),
                ('PercentMPRegenMod', models.IntegerField(default=0)),
                ('FlatArmorMod', models.IntegerField(default=0)),
                ('rFlatArmorModPerLevel', models.IntegerField(default=0)),
                ('PercentArmorMod', models.IntegerField(default=0)),
                ('rFlatArmorPenetrationMod', models.IntegerField(default=0)),
                ('rFlatArmorPenetrationModPerLevel', models.IntegerField(default=0)),
                ('rPercentArmorPenetrationMod', models.IntegerField(default=0)),
                ('rPercentArmorPenetrationModPerLevel', models.IntegerField(default=0)),
                ('FlatPhysicalDamageMod', models.IntegerField(default=0)),
                ('rFlatPhysicalDamageModPerLevel', models.IntegerField(default=0)),
                ('PercentPhysicalDamageMod', models.IntegerField(default=0)),
                ('FlatMagicDamageMod', models.IntegerField(default=0)),
                ('rFlatMagicDamageModPerLevel', models.IntegerField(default=0)),
                ('PercentMagicDamageMod', models.IntegerField(default=0)),
                ('FlatMovementSpeedMod', models.IntegerField(default=0)),
                ('rFlatMovementSpeedModPerLevel', models.IntegerField(default=0)),
                ('PercentMovementSpeedMod', models.IntegerField(default=0)),
                ('rPercentMovementSpeedModPerLevel', models.IntegerField(default=0)),
                ('FlatAttackSpeedMod', models.IntegerField(default=0)),
                ('PercentAttackSpeedMod', models.IntegerField(default=0)),
                ('rPercentAttackSpeedModPerLevel', models.IntegerField(default=0)),
                ('rFlatDodgeMod', models.IntegerField(default=0)),
                ('rFlatDodgeModPerLevel', models.IntegerField(default=0)),
                ('PercentDodgeMod', models.IntegerField(default=0)),
                ('FlatCritChanceMod', models.IntegerField(default=0)),
                ('rFlatCritChanceModPerLevel', models.IntegerField(default=0)),
                ('PercentCritChanceMod', models.IntegerField(default=0)),
                ('FlatCritDamageMod', models.IntegerField(default=0)),
                ('rFlatCritDamageModPerLevel', models.IntegerField(default=0)),
                ('PercentCritDamageMod', models.IntegerField(default=0)),
                ('FlatBlockMod', models.IntegerField(default=0)),
                ('PercentBlockMod', models.IntegerField(default=0)),
                ('FlatSpellBlockMod', models.IntegerField(default=0)),
                ('rFlatSpellBlockModPerLevel', models.IntegerField(default=0)),
                ('PercentSpellBlockMod', models.IntegerField(default=0)),
                ('FlatEXPBonus', models.IntegerField(default=0)),
                ('PercentEXPBonus', models.IntegerField(default=0)),
                ('rPercentCooldownMod', models.IntegerField(default=0)),
                ('rPercentCooldownModPerLevel', models.IntegerField(default=0)),
                ('rFlatTimeDeadMod', models.IntegerField(default=0)),
                ('rFlatTimeDeadModPerLevel', models.IntegerField(default=0)),
                ('rPercentTimeDeadMod', models.IntegerField(default=0)),
                ('rPercentTimeDeadModPerLevel', models.IntegerField(default=0)),
                ('rFlatGoldPer10Mod', models.IntegerField(default=0)),
                ('rFlatMagicPenetrationMod', models.IntegerField(default=0)),
                ('rFlatMagicPenetrationModPerLevel', models.IntegerField(default=0)),
                ('rPercentMagicPenetrationMod', models.IntegerField(default=0)),
                ('rPercentMagicPenetrationModPerLevel', models.IntegerField(default=0)),
                ('FlatEnergyRegenMod', models.IntegerField(default=0)),
                ('rFlatEnergyRegenModPerLevel', models.IntegerField(default=0)),
                ('FlatEnergyPoolMod', models.IntegerField(default=0)),
                ('rFlatEnergyModPerLevel', models.IntegerField(default=0)),
                ('PercentLifeStealMod', models.IntegerField(default=0)),
                ('PercentSpellVampMod', models.IntegerField(default=0)),
                ('built_from', models.ManyToManyField(related_name='item_from', to='dashboard.Item')),
                ('built_into', models.ManyToManyField(related_name='item_into', to='dashboard.Item')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platformId', models.CharField(max_length=255)),
                ('gameId', models.BigIntegerField(unique=True)),
                ('queueId', models.IntegerField(blank=True, choices=[(0, 'Custom'), (72, '1v1 Snowdown Showdown'), (73, '2v2 Snowdown Showdown'), (75, '6v6 Hexakill'), (76, 'Ultra Rapid Fire'), (78, 'One For All: Mirror Mode'), (83, 'Co-op vs AI Ultra Rapid Fire'), (98, '6v6 Hexakill'), (100, '5v5 ARAM'), (310, 'Nemesis'), (313, 'Black Market Brawlers'), (317, 'Definitely Not Dominion'), (325, 'All Random'), (400, '5v5 Draft Pick'), (420, '5v5 Ranked Solo'), (430, '5v5 Blind Pick'), (440, '5v5 Ranked Flex'), (450, '5v5 ARAM'), (460, '3v3 Blind Pick'), (470, '3v3 Ranked Flex'), (600, 'Blood Hunt Assassin'), (610, 'Dark Star: Singularity'), (700, 'Clash'), (800, 'Co-op vs. AI Intermediate Bot'), (810, 'Co-op vs. AI Intro Bot'), (820, 'Co-op vs. AI Beginner Bot'), (830, 'Co-op vs. AI Intro Bot'), (840, 'Co-op vs. AI Beginner Bot'), (850, 'Co-op vs. AI Intermediate Bot'), (900, 'ARURF'), (910, 'Ascension'), (920, 'Legend of the Poro King'), (940, 'Nexus Siege'), (950, 'Doom Bots Voting'), (960, 'Doom Bots Standard'), (980, 'Star Guardian Invasion: Normal'), (990, 'Star Guardian Invasion: Onslaught'), (1000, 'PROJECT: Hunters'), (1010, 'Snow ARURF'), (1020, 'One for All'), (1030, 'Odyssey Extraction: Intro'), (1040, 'Odyssey Extraction: Cadet'), (1050, 'Odyssey Extraction: Crewmember'), (1060, 'Odyssey Extraction: Captain'), (1070, 'Odyssey Extraction: Onslaught'), (1200, 'Nexus Blitz'), (2000, 'Tutorial 1'), (2010, 'Tutorial 2'), (2020, 'Tutorial 3')], null=True)),
                ('seasonId', models.IntegerField(blank=True, choices=[(0, 'PRESEASON 3'), (1, 'SEASON 3'), (2, 'PRESEASON 2014'), (3, 'SEASON 2014'), (4, 'PRESEASON 2015'), (5, 'SEASON 2015'), (6, 'PRESEASON 2016'), (7, 'SEASON 2016'), (8, 'PRESEASON 2017'), (9, 'SEASON 2017'), (10, 'PRESEASON 2018'), (11, 'SEASON 2018'), (12, 'PRESEASON 2019'), (13, 'SEASON 2019')], null=True)),
                ('mapId', models.IntegerField(blank=True, choices=[(1, "Summoner's Rift - Summer"), (2, "Summoner's Rift - Autumn"), (3, 'The Proving Grounds'), (4, 'Twisted Treeline - Original'), (8, 'The Crystal Scar'), (10, 'Twisted Treeline'), (11, "Summoner's Rift"), (12, 'Howling Abyss'), (14, "Butcher's Bridge"), (16, 'Cosmic Ruins'), (18, 'Valoran City Park'), (19, 'Substructure 43'), (20, 'Crash Site'), (21, 'Nexus Blitz')], null=True)),
                ('gameMode', models.CharField(max_length=255)),
                ('gameType', models.CharField(max_length=255)),
                ('gameVersion', models.CharField(max_length=255)),
                ('gameDuration', models.BigIntegerField()),
                ('timestamp', models.DateTimeField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Matches',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dark_mode', models.BooleanField(default=False)),
                ('premium', models.BooleanField(default=False)),
                ('premium_start', models.DateTimeField(blank=True, null=True)),
                ('email_confirmed', models.BooleanField(default=False)),
                ('archived', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('friends', models.ManyToManyField(related_name='Friends', to='dashboard.Profile')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Profiles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RankedTier',
            fields=[
                ('key', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('order', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Rune',
            fields=[
                ('version', models.CharField(max_length=255)),
                ('runeId', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('key', models.CharField(max_length=255)),
                ('icon', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('shortDesc', models.TextField()),
                ('longDesc', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Summoner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summonerName', models.CharField(max_length=255)),
                ('summonerId', models.CharField(max_length=255)),
                ('puuid', models.CharField(blank=True, max_length=255, null=True)),
                ('accountId', models.CharField(blank=True, max_length=255, null=True)),
                ('server', models.CharField(choices=[('BR1', 'Brazil'), ('EUN1', 'EU Nordic & East'), ('EUW1', 'EU West'), ('JP1', 'Japan'), ('KR', 'Korea'), ('LA1', 'Latin America North'), ('LA2', 'Latin America South'), ('NA1', 'North America'), ('OC1', 'Oceania'), ('TR1', 'Turkey'), ('RU', 'Russia'), ('PBE1', 'Public Beta Environment')], max_length=255)),
                ('profileIconId', models.BigIntegerField(blank=True, default=0)),
                ('summonerLevel', models.IntegerField(blank=True, default=1)),
                ('soloQ_leagueId', models.CharField(blank=True, max_length=255)),
                ('soloQ_leagueName', models.CharField(blank=True, max_length=255)),
                ('soloQ_hotStreak', models.BooleanField(default=False)),
                ('soloQ_wins', models.BigIntegerField(blank=True, default=0, null=True)),
                ('soloQ_losses', models.BigIntegerField(blank=True, default=0, null=True)),
                ('soloQ_veteran', models.BooleanField(default=False)),
                ('soloQ_rank', models.CharField(blank=True, max_length=255, null=True)),
                ('soloQ_inactive', models.BooleanField(default=False)),
                ('soloQ_freshBlood', models.BooleanField(default=False)),
                ('soloQ_leaguePoints', models.BigIntegerField(blank=True, default=0, null=True)),
                ('flexSR_leagueId', models.CharField(blank=True, max_length=255)),
                ('flexSR_leagueName', models.CharField(blank=True, max_length=255)),
                ('flexSR_hotStreak', models.BooleanField(default=False)),
                ('flexSR_wins', models.BigIntegerField(blank=True, default=0, null=True)),
                ('flexSR_losses', models.BigIntegerField(blank=True, default=0, null=True)),
                ('flexSR_veteran', models.BooleanField(default=False)),
                ('flexSR_rank', models.CharField(blank=True, max_length=255, null=True)),
                ('flexSR_inactive', models.BooleanField(default=False)),
                ('flexSR_freshBlood', models.BooleanField(default=False)),
                ('flexSR_leaguePoints', models.BigIntegerField(blank=True, default=0, null=True)),
                ('flexTT_leagueId', models.CharField(blank=True, max_length=255)),
                ('flexTT_leagueName', models.CharField(blank=True, max_length=255)),
                ('flexTT_hotStreak', models.BooleanField(default=False)),
                ('flexTT_wins', models.BigIntegerField(blank=True, default=0, null=True)),
                ('flexTT_losses', models.BigIntegerField(blank=True, default=0, null=True)),
                ('flexTT_veteran', models.BooleanField(default=False)),
                ('flexTT_rank', models.CharField(blank=True, max_length=255, null=True)),
                ('flexTT_inactive', models.BooleanField(default=False)),
                ('flexTT_freshBlood', models.BooleanField(default=False)),
                ('flexTT_leaguePoints', models.BigIntegerField(blank=True, default=0, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(null=True)),
                ('flexSR_tier', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Summoners_FlexSR', to='dashboard.RankedTier')),
                ('flexTT_tier', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Summoners_FlexTT', to='dashboard.RankedTier')),
                ('soloQ_tier', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Summoners_SoloQ', to='dashboard.RankedTier')),
                ('user_profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Summoners', to='dashboard.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='SummonerSpell',
            fields=[
                ('version', models.CharField(max_length=255, null=True)),
                ('key', models.IntegerField(primary_key=True, serialize=False, unique=True)),
                ('summonerSpellId', models.CharField(max_length=255, null=True)),
                ('name', models.CharField(max_length=255, null=True)),
                ('description', models.TextField(null=True)),
                ('tooltip', models.TextField(null=True)),
                ('maxrank', models.IntegerField(null=True)),
                ('cooldown', models.IntegerField(null=True)),
                ('cooldownBurn', models.CharField(max_length=255, null=True)),
                ('cost', models.IntegerField(null=True)),
                ('costBurn', models.CharField(max_length=255, null=True)),
                ('costType', models.CharField(max_length=255, null=True)),
                ('summonerLevel', models.IntegerField(null=True)),
                ('maxammo', models.CharField(max_length=255, null=True)),
                ('range', models.IntegerField(null=True)),
                ('rangeBurn', models.CharField(max_length=255, null=True)),
                ('image_full', models.CharField(max_length=255, null=True)),
                ('image_sprite', models.CharField(max_length=255, null=True)),
                ('image_group', models.CharField(max_length=255, null=True)),
                ('image_x', models.IntegerField(null=True)),
                ('image_y', models.IntegerField(null=True)),
                ('image_w', models.IntegerField(null=True)),
                ('image_h', models.IntegerField(null=True)),
                ('resource', models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.IntegerField(blank=True, default=0, null=True)),
                ('date_achieved', models.DateTimeField(blank=True, default=None, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='UserAchievements_Achievements', to='dashboard.Achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='UserAchievements_Users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ThirdPartyVerification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=255)),
                ('verified', models.BooleanField(default=False)),
                ('archived', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('summoner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='summoner_verification', to='dashboard.Summoner')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='summoner_verification_user', to='dashboard.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('win', models.BooleanField(default=False)),
                ('teamId', models.BigIntegerField()),
                ('firstDragon', models.BooleanField(default=False)),
                ('firstInhibitor', models.BooleanField(default=False)),
                ('firstRiftHerald', models.BooleanField(default=False)),
                ('firstBaron', models.BooleanField(default=False)),
                ('baronKills', models.BigIntegerField()),
                ('riftHeraldKills', models.BigIntegerField()),
                ('firstBlood', models.BooleanField(default=False)),
                ('firstTower', models.BooleanField(default=False)),
                ('inhibitorKills', models.BigIntegerField()),
                ('towerKills', models.BigIntegerField()),
                ('dragonKills', models.BigIntegerField()),
                ('dominionVictoryScore', models.BigIntegerField()),
                ('vilemawKills', models.BigIntegerField()),
                ('match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Teams', to='dashboard.Match')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currentPlatformId', models.CharField(max_length=255)),
                ('platformId', models.CharField(max_length=255)),
                ('matchHistoryUri', models.CharField(max_length=255)),
                ('participantId', models.BigIntegerField()),
                ('lane', models.CharField(choices=[('TOP', 'Top'), ('JUNGLE', 'Jungle'), ('MIDDLE', 'Mid'), ('BOTTOM', 'Bot'), ('NONE', 'None')], default='NONE', max_length=255)),
                ('neutralMinionsKilledTeamJungle', models.BigIntegerField()),
                ('visionScore', models.BigIntegerField()),
                ('magicDamageDealtToChampions', models.BigIntegerField()),
                ('largestMultiKill', models.BigIntegerField()),
                ('totalTimeCrowdControlDealt', models.BigIntegerField()),
                ('longestTimeSpentLiving', models.BigIntegerField()),
                ('perk1Var1', models.BigIntegerField()),
                ('perk1Var3', models.BigIntegerField()),
                ('perk1Var2', models.BigIntegerField()),
                ('tripleKills', models.BigIntegerField()),
                ('playerScore9', models.BigIntegerField()),
                ('playerScore8', models.BigIntegerField()),
                ('kills', models.BigIntegerField()),
                ('playerScore1', models.BigIntegerField()),
                ('playerScore0', models.BigIntegerField()),
                ('playerScore3', models.BigIntegerField()),
                ('playerScore2', models.BigIntegerField()),
                ('playerScore5', models.BigIntegerField()),
                ('playerScore4', models.BigIntegerField()),
                ('playerScore7', models.BigIntegerField()),
                ('playerScore6', models.BigIntegerField()),
                ('perk5Var1', models.BigIntegerField()),
                ('perk5Var3', models.BigIntegerField()),
                ('perk5Var2', models.BigIntegerField()),
                ('totalScoreRank', models.BigIntegerField()),
                ('neutralMinionsKilled', models.BigIntegerField()),
                ('statPerk1', models.BigIntegerField()),
                ('statPerk0', models.BigIntegerField()),
                ('damageDealtToTurrets', models.BigIntegerField()),
                ('physicalDamageDealtToChampions', models.BigIntegerField()),
                ('damageDealtToObjectives', models.BigIntegerField()),
                ('perk2Var2', models.BigIntegerField()),
                ('perk2Var3', models.BigIntegerField()),
                ('totalUnitsHealed', models.BigIntegerField()),
                ('perk2Var1', models.BigIntegerField()),
                ('perk4Var1', models.BigIntegerField()),
                ('totalDamageTaken', models.BigIntegerField()),
                ('perk4Var3', models.BigIntegerField()),
                ('wardsKilled', models.BigIntegerField()),
                ('largestCriticalStrike', models.BigIntegerField()),
                ('largestKillingSpree', models.BigIntegerField()),
                ('quadraKills', models.BigIntegerField()),
                ('magicDamageDealt', models.BigIntegerField()),
                ('firstBloodAssist', models.BooleanField(default=False)),
                ('perk3Var3', models.BigIntegerField()),
                ('perk3Var2', models.BigIntegerField()),
                ('perk3Var1', models.BigIntegerField()),
                ('damageSelfMitigated', models.BigIntegerField()),
                ('magicalDamageTaken', models.BigIntegerField()),
                ('perk0Var2', models.BigIntegerField()),
                ('firstInhibitorKill', models.BooleanField(default=False)),
                ('trueDamageTaken', models.BigIntegerField()),
                ('assists', models.BigIntegerField()),
                ('perk4Var2', models.BigIntegerField()),
                ('goldSpent', models.BigIntegerField()),
                ('trueDamageDealt', models.BigIntegerField()),
                ('physicalDamageDealt', models.BigIntegerField()),
                ('sightWardsBoughtInGame', models.BigIntegerField()),
                ('totalDamageDealtToChampions', models.BigIntegerField()),
                ('physicalDamageTaken', models.BigIntegerField()),
                ('totalPlayerScore', models.BigIntegerField()),
                ('win', models.BooleanField(default=False)),
                ('objectivePlayerScore', models.BigIntegerField()),
                ('totalDamageDealt', models.BigIntegerField()),
                ('neutralMinionsKilledEnemyJungle', models.BigIntegerField()),
                ('deaths', models.BigIntegerField()),
                ('wardsPlaced', models.BigIntegerField()),
                ('perkPrimaryStyle', models.BigIntegerField()),
                ('perkSubStyle', models.BigIntegerField()),
                ('turretKills', models.BigIntegerField()),
                ('firstBloodKill', models.BooleanField(default=False)),
                ('trueDamageDealtToChampions', models.BigIntegerField()),
                ('goldEarned', models.BigIntegerField()),
                ('killingSprees', models.BigIntegerField()),
                ('unrealKills', models.BigIntegerField()),
                ('firstTowerAssist', models.BooleanField(default=False)),
                ('firstTowerKill', models.BooleanField(default=False)),
                ('champLevel', models.BigIntegerField()),
                ('doubleKills', models.BigIntegerField()),
                ('inhibitorKills', models.BigIntegerField()),
                ('firstInhibitorAssist', models.BooleanField(default=False)),
                ('perk0Var1', models.BigIntegerField()),
                ('combatPlayerScore', models.BigIntegerField()),
                ('perk0Var3', models.BigIntegerField()),
                ('visionWardsBoughtInGame', models.BigIntegerField()),
                ('pentaKills', models.BigIntegerField()),
                ('totalHeal', models.BigIntegerField()),
                ('totalMinionsKilled', models.BigIntegerField()),
                ('timeCCingOthers', models.BigIntegerField()),
                ('statPerk2', models.BigIntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('champion', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Players', to='dashboard.Champion')),
                ('item0', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Items_1', to='dashboard.Item')),
                ('item1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Items_2', to='dashboard.Item')),
                ('item2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Items_3', to='dashboard.Item')),
                ('item3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Items_4', to='dashboard.Item')),
                ('item4', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Items_5', to='dashboard.Item')),
                ('item5', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Items_6', to='dashboard.Item')),
                ('item6', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Items_7', to='dashboard.Item')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Players', to='dashboard.Match')),
                ('perk0', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Runes_1', to='dashboard.Rune')),
                ('perk1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Runes_2', to='dashboard.Rune')),
                ('perk2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Runes_3', to='dashboard.Rune')),
                ('perk3', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Runes_4', to='dashboard.Rune')),
                ('perk4', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Runes_5', to='dashboard.Rune')),
                ('perk5', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_Runes_6', to='dashboard.Rune')),
                ('spell1Id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_SSpells_1', to='dashboard.SummonerSpell')),
                ('spell2Id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Player_SSPells_2', to='dashboard.SummonerSpell')),
                ('summoner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Players', to='dashboard.Summoner')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.Team')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='players',
            field=models.ManyToManyField(related_name='Player_Matches', to='dashboard.Player'),
        ),
        migrations.AddField(
            model_name='match',
            name='summoners',
            field=models.ManyToManyField(related_name='Matches', to='dashboard.Summoner'),
        ),
        migrations.CreateModel(
            name='ImprovementLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('good', models.TextField(blank=True, null=True)),
                ('bad', models.TextField(blank=True, null=True)),
                ('lp', models.IntegerField(blank=True, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_logs', to='dashboard.Match')),
                ('opponent', models.ManyToManyField(related_name='opponent_logs', to='dashboard.Champion')),
                ('summoner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='summoner_logs', to='dashboard.Summoner')),
            ],
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roomId', models.CharField(max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField()),
                ('members', models.ManyToManyField(related_name='Members', to='dashboard.Profile')),
            ],
        ),
        migrations.CreateModel(
            name='AccessCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=32)),
                ('used', models.BooleanField(default=False)),
                ('date_used', models.DateTimeField(blank=True, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Access_Codes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='summoner',
            constraint=models.UniqueConstraint(fields=('summonerId', 'server'), name='Unique SummonerId by Server'),
        ),
        migrations.AddConstraint(
            model_name='summoner',
            constraint=models.UniqueConstraint(fields=('accountId', 'server'), name='Unique AccountId by Server'),
        ),
    ]
